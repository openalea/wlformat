"""A special directive for including a workflow in sphinx documentation

:Example:

    .. workflow:: filename
        width: 200
        height: 200


options are identical to the image/plot/figure directives
(width, scale, height, ...)

.. moduleauthor:: Jerome Chopard
"""

from docutils import nodes
from docutils.parsers.rst import directives, Directive
import json
from openalea.wlformat.convert import svg
import os


class WorkflowWarning(Warning):
    """Warning category for all warnings generated by this directive.

    By printing our warnings with this category, it becomes possible to turn
    them into errors by using in your conf.py::

      warnings.simplefilter('error', workflow_directive.WorkflowWarning)

    This way, you can ensure that your docs only build if all your examples
    actually run successfully.
    """
    pass


def out_of_date(original, derived):
    """Returns True if derived is out of date with regard to original.

    Args:
        original (str): full file path
        derived (str): full file path

    Returns:
        (bool)
    """
    return (not os.path.exists(derived) or
            (os.path.exists(original) and
             os.stat(derived).st_mtime < os.stat(original).st_mtime))


def align(argument):
    """Conversion function for the "align" option.
    """
    return directives.choice(argument, ('left', 'center', 'right'))


class WorkflowPlotDirective(Directive):
    """Main directive to render `.. workflow::`directives.
    """

    required_arguments = 1
    has_content = False
    option_spec = {'alt': directives.unchanged,
                   'height': directives.nonnegative_int,
                   'width': directives.nonnegative_int,
                   'align': align,
                   }

    def run(self):
        env = self.state.document.settings.env

        wkf_file = directives.uri(self.arguments[0])
        if not os.path.isabs(wkf_file):
            wkf_file = os.path.join(os.path.dirname(env.doc2path(env.docname)),
                                    wkf_file)

        wkf_name = os.path.splitext(wkf_file)[0]
        svg_file = "%s.svg" % wkf_name
        if out_of_date(wkf_file, svg_file):
            # render the workflow again
            with open(wkf_file, 'r') as f:
                wkf = json.load(f)

            w = self.options.get('width', 600)
            h = self.options.get('height', 600)

            drawing, bb = svg.export_workflow(wkf, {}, (w, h))

            with open(svg_file, 'w') as f:
                f.write(drawing)

        self.options['uri'] = svg_file
        node = nodes.image(**self.options)

        return [node]


def setup(app):
    """Function called by sphinx at import.

    Args:
        app (Sphinx): high level object to control sphinx behaviour

    Returns:
        (dict): optional values like extension version
    """
    app.add_directive('workflow', WorkflowPlotDirective)

    return {'version': '0.1'}  # identifies the version of the extension
